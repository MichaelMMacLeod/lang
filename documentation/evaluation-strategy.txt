The rules I used here aren't correct (they rely on rule ordering). I
will try to fix this later. The point of this is to demonstrate the
difference between reducing using a breadth-first-search strategy
(VecDeq + pop_front) vs a depth-first-search strategy (Vec + pop)

Using BFS:

running 1 test
Reducing (radix-sort (1 1 1) (1 1 0) (0 1 1) (0 1 0) (1 0 1) (1 0 0) (0 0 1) (0 0 0))
1.      (sort (<--0 (1 1 | 1) (1 1 | 0) (0 1 | 1) (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1-->))
2.      (sort (<--0 (1 1 | 0) (0 1 | 1) (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (1 | 1 1)))
3.      (sort ((1 | 1 0) <--0 (0 1 | 1) (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (1 | 1 1)))
4.      (sort ((1 | 1 0) <--0 (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (0 | 1 1) (1 | 1 1)))
5.      (sort ((1 | 1 0) (0 | 1 0) <--0 (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (0 | 1 1) (1 | 1 1)))
6.      (sort ((1 | 1 0) (0 | 1 0) <--0 (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (1 | 0 1) (0 | 1 1) (1 | 1 1)))
7.      (sort ((1 | 1 0) (0 | 1 0) (1 | 0 0) <--0 (0 0 | 1) (0 0 | 0) 1--> (1 | 0 1) (0 | 1 1) (1 | 1 1)))
8.      (sort ((1 | 1 0) (0 | 1 0) (1 | 0 0) <--0 (0 0 | 0) 1--> (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1)))
9.      (sort ((1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) <--0 1--> (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1)))
10.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
11.     (append (sort (<--0 (0 | 1 0) (1 | 0 0) (0 | 0 0) 1--> (| 1 1 0))) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
12.     (append (sort (<--0 (1 | 0 0) (0 | 0 0) 1--> (| 0 1 0) (| 1 1 0))) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
13.     (append (sort ((| 1 0 0) <--0 (0 | 0 0) 1--> (| 0 1 0) (| 1 1 0))) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
14.     (append (sort ((| 1 0 0) (| 0 0 0) <--0 1--> (| 0 1 0) (| 1 1 0))) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
15.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
16.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (sort ((| 0 0 1) <--0 (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
17.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (sort ((| 0 0 1) (| 1 0 1) <--0 (0 | 1 1) (1 | 1 1) 1-->)))
18.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (sort ((| 0 0 1) (| 1 0 1) <--0 (1 | 1 1) 1--> (| 0 1 1))))
19.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (sort ((| 0 0 1) (| 1 0 1) <--0 1--> (| 1 1 1) (| 0 1 1))))
20.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
21.     (append (append (sort (<--0 (| 0 0 0) 1--> (1 0 0))) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
22.     (append (append (sort ((0 0 0) <--0 1--> (1 0 0))) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
23.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
24.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (sort ((0 1 0) <--0 (| 1 1 0) 1-->))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
25.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (sort ((0 1 0) <--0 1--> (1 1 0)))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
26.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
27.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (sort ((0 0 1) <--0 (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
28.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (sort ((0 0 1) <--0 1--> (1 0 1))) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
29.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
30.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (sort (<--0 (| 0 1 1) 1--> (1 1 1)))))
31.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (sort ((0 1 1) <--0 1--> (1 1 1)))))
32.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
33.     (append (append (append (list (0 0 0)) (sort (<--0 (1 0 0) 1-->))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
34.     (append (append (append (list (0 0 0)) (list (1 0 0))) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
35.     (append (append (list (0 0 0) (1 0 0)) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
36.     (append (append (list (0 0 0) (1 0 0)) (append (list (0 1 0)) (sort (<--0 (1 1 0) 1-->)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
37.     (append (append (list (0 0 0) (1 0 0)) (append (list (0 1 0)) (list (1 1 0)))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
38.     (append (append (list (0 0 0) (1 0 0)) (list (0 1 0) (1 1 0))) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
39.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
40.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (append (list (0 0 1)) (sort (<--0 (1 0 1) 1-->))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
41.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (append (list (0 0 1)) (list (1 0 1))) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
42.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (list (0 0 1) (1 0 1)) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
43.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (list (0 0 1) (1 0 1)) (append (list (0 1 1)) (sort (<--0 (1 1 1) 1-->)))))
44.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (list (0 0 1) (1 0 1)) (append (list (0 1 1)) (list (1 1 1)))))
45.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (append (list (0 0 1) (1 0 1)) (list (0 1 1) (1 1 1))))
46.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
47.     (list (0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))
test env::test::radix_sort ... ok

Using DFS:

running 1 test
Reducing (radix-sort (1 1 1) (1 1 0) (0 1 1) (0 1 0) (1 0 1) (1 0 0) (0 0 1) (0 0 0))
1.      (sort (<--0 (1 1 | 1) (1 1 | 0) (0 1 | 1) (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1-->))
2.      (sort (<--0 (1 1 | 0) (0 1 | 1) (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (1 | 1 1)))
3.      (sort ((1 | 1 0) <--0 (0 1 | 1) (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (1 | 1 1)))
4.      (sort ((1 | 1 0) <--0 (0 1 | 0) (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (0 | 1 1) (1 | 1 1)))
5.      (sort ((1 | 1 0) (0 | 1 0) <--0 (1 0 | 1) (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (0 | 1 1) (1 | 1 1)))
6.      (sort ((1 | 1 0) (0 | 1 0) <--0 (1 0 | 0) (0 0 | 1) (0 0 | 0) 1--> (1 | 0 1) (0 | 1 1) (1 | 1 1)))
7.      (sort ((1 | 1 0) (0 | 1 0) (1 | 0 0) <--0 (0 0 | 1) (0 0 | 0) 1--> (1 | 0 1) (0 | 1 1) (1 | 1 1)))
8.      (sort ((1 | 1 0) (0 | 1 0) (1 | 0 0) <--0 (0 0 | 0) 1--> (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1)))
9.      (sort ((1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) <--0 1--> (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1)))
10.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (sort (<--0 (0 | 0 1) (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
11.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (sort ((| 0 0 1) <--0 (1 | 0 1) (0 | 1 1) (1 | 1 1) 1-->)))
12.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (sort ((| 0 0 1) (| 1 0 1) <--0 (0 | 1 1) (1 | 1 1) 1-->)))
13.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (sort ((| 0 0 1) (| 1 0 1) <--0 (1 | 1 1) 1--> (| 0 1 1))))
14.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (sort ((| 0 0 1) (| 1 0 1) <--0 1--> (| 1 1 1) (| 0 1 1))))
15.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 1 1 1) (| 0 1 1) 1-->))))
16.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort (<--0 (| 0 1 1) 1--> (1 1 1)))))
17.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (sort ((0 1 1) <--0 1--> (1 1 1)))))
18.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (append (sort (<--0 (0 1 1) 1-->)) (sort (<--0 (1 1 1) 1-->)))))
19.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (append (sort (<--0 (0 1 1) 1-->)) (list (1 1 1)))))
20.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (append (list (0 1 1)) (list (1 1 1)))))
21.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort (<--0 (| 0 0 1) (| 1 0 1) 1-->)) (list (0 1 1) (1 1 1))))
22.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort ((0 0 1) <--0 (| 1 0 1) 1-->)) (list (0 1 1) (1 1 1))))
23.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (sort ((0 0 1) <--0 1--> (1 0 1))) (list (0 1 1) (1 1 1))))
24.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (append (sort (<--0 (0 0 1) 1-->)) (sort (<--0 (1 0 1) 1-->))) (list (0 1 1) (1 1 1))))
25.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (append (sort (<--0 (0 0 1) 1-->)) (list (1 0 1))) (list (0 1 1) (1 1 1))))
26.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (append (list (0 0 1)) (list (1 0 1))) (list (0 1 1) (1 1 1))))
27.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (append (list (0 0 1) (1 0 1)) (list (0 1 1) (1 1 1))))
28.     (append (sort (<--0 (1 | 1 0) (0 | 1 0) (1 | 0 0) (0 | 0 0) 1-->)) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
29.     (append (sort (<--0 (0 | 1 0) (1 | 0 0) (0 | 0 0) 1--> (| 1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
30.     (append (sort (<--0 (1 | 0 0) (0 | 0 0) 1--> (| 0 1 0) (| 1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
31.     (append (sort ((| 1 0 0) <--0 (0 | 0 0) 1--> (| 0 1 0) (| 1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
32.     (append (sort ((| 1 0 0) (| 0 0 0) <--0 1--> (| 0 1 0) (| 1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
33.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort (<--0 (| 0 1 0) (| 1 1 0) 1-->))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
34.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort ((0 1 0) <--0 (| 1 1 0) 1-->))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
35.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (sort ((0 1 0) <--0 1--> (1 1 0)))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
36.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (append (sort (<--0 (0 1 0) 1-->)) (sort (<--0 (1 1 0) 1-->)))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
37.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (append (sort (<--0 (0 1 0) 1-->)) (list (1 1 0)))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
38.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (append (list (0 1 0)) (list (1 1 0)))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
39.     (append (append (sort (<--0 (| 1 0 0) (| 0 0 0) 1-->)) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
40.     (append (append (sort (<--0 (| 0 0 0) 1--> (1 0 0))) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
41.     (append (append (sort ((0 0 0) <--0 1--> (1 0 0))) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
42.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (sort (<--0 (1 0 0) 1-->))) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
43.     (append (append (append (sort (<--0 (0 0 0) 1-->)) (list (1 0 0))) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
44.     (append (append (append (list (0 0 0)) (list (1 0 0))) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
45.     (append (append (list (0 0 0) (1 0 0)) (list (0 1 0) (1 1 0))) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
46.     (append (list (0 0 0) (1 0 0) (0 1 0) (1 1 0)) (list (0 0 1) (1 0 1) (0 1 1) (1 1 1)))
47.     (list (0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))
test env::test::radix_sort ... ok

When doing radix sort it doesn't make a difference in terms of number
of reductions whether we use DFS or BFS. I think this is true of all
environments. However, it does make a difference on the amount of
horizontal space that is taken up. I don't know what this means in
terms of memory usage (it might be only visually meaningful).

The property that DFS uses less horizontal space is upheld when
computing fibonacci numbers using the naive recursive strategy:

Fibonacci with BFS:

running 1 test
Reducing (equal (fibs 6) 8)
1.      (equal (fibs 6) (S 7))
2.      (equal (fibs (S 5)) (S 7))
3.      (equal (fibs (S 5)) (S (S 6)))
4.      (equal (fibs (S (S 4))) (S (S 6)))
5.      (equal (+ (fibs 4) (fibs (S 4))) (S (S 6)))
6.      (equal (+ (fibs (S 3)) (fibs (S (S 3)))) (S (S 6)))
7.      (equal (+ (fibs (S 3)) (+ (fibs 3) (fibs (S 3)))) (S (S 6)))
8.      (equal (+ (fibs (S 3)) (+ (fibs 3) (fibs (S 3)))) (S (S (S (S (S 3))))))
9.      (equal (+ (fibs (S (S 2))) (+ (fibs (S 2)) (fibs (S (S 2))))) (S (S (S (S (S (S 2)))))))
10.     (equal (+ (+ (fibs 2) (fibs (S 2))) (+ (fibs (S 2)) (fibs (S (S 2))))) (S (S (S (S (S (S 2)))))))
11.     (equal (+ (+ (fibs 2) (fibs (S 2))) (+ (fibs (S 2)) (+ (fibs 2) (fibs (S 2))))) (S (S (S (S (S (S 2)))))))
12.     (equal (+ (+ (fibs (S 1)) (fibs (S (S 1)))) (+ (fibs (S (S 1))) (+ (fibs (S 1)) (fibs (S (S 1)))))) (S (S (S (S (S (S (S 1))))))))
13.     (equal (+ (+ (fibs (S 1)) (+ (fibs 1) (fibs (S 1)))) (+ (fibs (S (S 1))) (+ (fibs (S 1)) (fibs (S (S 1)))))) (S (S (S (S (S (S (S 1))))))))
14.     (equal (+ (+ (fibs (S 1)) (+ (fibs 1) (fibs (S 1)))) (+ (+ (fibs 1) (fibs (S 1))) (+ (fibs (S 1)) (fibs (S (S 1)))))) (S (S (S (S (S (S (S 1))))))))
15.     (equal (+ (+ (fibs (S 1)) (+ (fibs 1) (fibs (S 1)))) (+ (+ (fibs 1) (fibs (S 1))) (+ (fibs (S 1)) (+ (fibs 1) (fibs (S 1)))))) (S (S (S (S (S (S (S 1))))))))
16.     (equal (+ (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
17.     (equal (+ (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
18.     (equal (+ (+ (+ 0 (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
19.     (equal (+ (+ (+ 0 (S 0)) (+ (fibs (S 0)) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
20.     (equal (+ (+ (+ (S 0) 0) (+ (fibs (S 0)) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
21.     (equal (+ (+ (S 0) (+ (fibs (S 0)) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
22.     (equal (+ (+ (S 0) (+ (S 0) (fibs (S (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
23.     (equal (+ (+ (S 0) (+ (S 0) (+ (fibs 0) (fibs (S 0))))) (+ (+ (fibs (S 0)) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
24.     (equal (+ (+ (S 0) (+ (S 0) (+ (fibs 0) (fibs (S 0))))) (+ (+ (S 0) (fibs (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
25.     (equal (+ (+ (S 0) (+ (S 0) (+ (fibs 0) (fibs (S 0))))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
26.     (equal (+ (+ (S 0) (+ (S 0) (+ (fibs 0) (fibs (S 0))))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
27.     (equal (+ (+ (S 0) (+ (S 0) (+ 0 (fibs (S 0))))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
28.     (equal (+ (+ (S 0) (+ (S 0) (+ 0 (S 0)))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
29.     (equal (+ (+ (S 0) (+ (S 0) (+ (S 0) 0))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
30.     (equal (+ (+ (S 0) (+ (S 0) (S 0))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
31.     (equal (+ (+ (S 0) (+ (S (S 0)) 0)) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
32.     (equal (+ (+ (S 0) (S (S 0))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
33.     (equal (+ (+ (S (S 0)) (S 0)) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
34.     (equal (+ (+ (S (S (S 0))) 0) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
35.     (equal (+ (S (S (S 0))) (+ (+ (S 0) (+ (fibs 0) (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
36.     (equal (+ (S (S (S 0))) (+ (+ (S 0) (+ 0 (fibs (S 0)))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
37.     (equal (+ (S (S (S 0))) (+ (+ (S 0) (+ 0 (S 0))) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
38.     (equal (+ (S (S (S 0))) (+ (+ (S 0) (+ (S 0) 0)) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
39.     (equal (+ (S (S (S 0))) (+ (+ (S 0) (S 0)) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
40.     (equal (+ (S (S (S 0))) (+ (+ (S (S 0)) 0) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
41.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (+ (fibs 0) (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
42.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (+ 0 (fibs (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
43.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (+ 0 (S 0)) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
44.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (+ (S 0) 0) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
45.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
46.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S 0) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
47.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S 0) (+ (fibs 0) (fibs (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
48.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S 0) (+ 0 (fibs (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
49.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S 0) (+ 0 (S 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
50.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S 0) (+ (S 0) 0))))) (S (S (S (S (S (S (S (S 0)))))))))
51.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S 0) (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
52.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (+ (S (S 0)) 0)))) (S (S (S (S (S (S (S (S 0)))))))))
53.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S 0) (S (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
54.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S (S 0)) (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
55.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (+ (S (S (S 0))) 0))) (S (S (S (S (S (S (S (S 0)))))))))
56.     (equal (+ (S (S (S 0))) (+ (S (S 0)) (S (S (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
57.     (equal (+ (S (S (S 0))) (+ (S (S (S 0))) (S (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
58.     (equal (+ (S (S (S 0))) (+ (S (S (S (S 0)))) (S 0))) (S (S (S (S (S (S (S (S 0)))))))))
59.     (equal (+ (S (S (S 0))) (+ (S (S (S (S (S 0))))) 0)) (S (S (S (S (S (S (S (S 0)))))))))
60.     (equal (+ (S (S (S 0))) (S (S (S (S (S 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
61.     (equal (+ (S (S (S (S 0)))) (S (S (S (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
62.     (equal (+ (S (S (S (S (S 0))))) (S (S (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
63.     (equal (+ (S (S (S (S (S (S 0)))))) (S (S 0))) (S (S (S (S (S (S (S (S 0)))))))))
64.     (equal (+ (S (S (S (S (S (S (S 0))))))) (S 0)) (S (S (S (S (S (S (S (S 0)))))))))
65.     (equal (+ (S (S (S (S (S (S (S (S 0)))))))) 0) (S (S (S (S (S (S (S (S 0)))))))))
66.     (equal (S (S (S (S (S (S (S (S 0)))))))) (S (S (S (S (S (S (S (S 0)))))))))
67.     (equal (S (S (S (S (S (S (S 0))))))) (S (S (S (S (S (S (S 0))))))))
68.     (equal (S (S (S (S (S (S 0)))))) (S (S (S (S (S (S 0)))))))
69.     (equal (S (S (S (S (S 0))))) (S (S (S (S (S 0))))))
70.     (equal (S (S (S (S 0)))) (S (S (S (S 0)))))
71.     (equal (S (S (S 0))) (S (S (S 0))))
72.     (equal (S (S 0)) (S (S 0)))
73.     (equal (S 0) (S 0))
74.     (equal 0 0)
75.     true
test env::test::peano_fibonacci_six_is_eight ... ok

Fibonacci with DFS:

running 1 test
Reducing (equal (fibs 6) 8)
1.      (equal (fibs 6) (S 7))
2.      (equal (fibs 6) (S (S 6)))
3.      (equal (fibs 6) (S (S (S 5))))
4.      (equal (fibs 6) (S (S (S (S 4)))))
5.      (equal (fibs 6) (S (S (S (S (S 3))))))
6.      (equal (fibs 6) (S (S (S (S (S (S 2)))))))
7.      (equal (fibs 6) (S (S (S (S (S (S (S 1))))))))
8.      (equal (fibs 6) (S (S (S (S (S (S (S (S 0)))))))))
9.      (equal (fibs (S (S (S (S (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
10.     (equal (+ (fibs (S (S (S (S 0))))) (fibs (S (S (S (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
11.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (fibs (S (S (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
12.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (fibs (S (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
13.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
14.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (+ (fibs 0) (fibs (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
15.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (+ (fibs 0) (S 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
16.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (+ (S (fibs 0)) 0))))) (S (S (S (S (S (S (S (S 0)))))))))
17.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (fibs (S 0)) (S (fibs 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
18.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (S (fibs (S 0))) (fibs 0))))) (S (S (S (S (S (S (S (S 0)))))))))
19.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (+ (S (fibs (S 0))) 0)))) (S (S (S (S (S (S (S (S 0)))))))))
20.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (fibs (S (S 0))) (S (fibs (S 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
21.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (S (fibs (S (S 0)))) (fibs (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
22.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (S (fibs (S (S 0)))) (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
23.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (+ (S (S (fibs (S (S 0))))) 0))) (S (S (S (S (S (S (S (S 0)))))))))
24.     (equal (+ (fibs (S (S (S (S 0))))) (+ (fibs (S (S (S 0)))) (S (S (fibs (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
25.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (fibs (S (S (S 0))))) (S (fibs (S (S 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
26.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (fibs (S (S (S 0)))))) (fibs (S (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
27.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (fibs (S (S (S 0)))))) (+ (fibs 0) (fibs (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
28.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (fibs (S (S (S 0)))))) (+ (fibs 0) (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
29.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (fibs (S (S (S 0)))))) (+ (S (fibs 0)) 0))) (S (S (S (S (S (S (S (S 0)))))))))
30.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (fibs (S (S (S 0)))))) (S (fibs 0)))) (S (S (S (S (S (S (S (S 0)))))))))
31.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (S (fibs (S (S (S 0))))))) (fibs 0))) (S (S (S (S (S (S (S (S 0)))))))))
32.     (equal (+ (fibs (S (S (S (S 0))))) (+ (S (S (S (fibs (S (S (S 0))))))) 0)) (S (S (S (S (S (S (S (S 0)))))))))
33.     (equal (+ (fibs (S (S (S (S 0))))) (S (S (S (fibs (S (S (S 0)))))))) (S (S (S (S (S (S (S (S 0)))))))))
34.     (equal (+ (S (fibs (S (S (S (S 0)))))) (S (S (fibs (S (S (S 0))))))) (S (S (S (S (S (S (S (S 0)))))))))
35.     (equal (+ (S (S (fibs (S (S (S (S 0))))))) (S (fibs (S (S (S 0)))))) (S (S (S (S (S (S (S (S 0)))))))))
36.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (fibs (S (S (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
37.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (fibs (S 0)) (fibs (S (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
38.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (fibs (S 0)) (+ (fibs 0) (fibs (S 0))))) (S (S (S (S (S (S (S (S 0)))))))))
39.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (fibs (S 0)) (+ (fibs 0) (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
40.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (fibs (S 0)) (+ (S (fibs 0)) 0))) (S (S (S (S (S (S (S (S 0)))))))))
41.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (fibs (S 0)) (S (fibs 0)))) (S (S (S (S (S (S (S (S 0)))))))))
42.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (S (fibs (S 0))) (fibs 0))) (S (S (S (S (S (S (S (S 0)))))))))
43.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (+ (S (fibs (S 0))) 0)) (S (S (S (S (S (S (S (S 0)))))))))
44.     (equal (+ (S (S (S (fibs (S (S (S (S 0)))))))) (S (fibs (S 0)))) (S (S (S (S (S (S (S (S 0)))))))))
45.     (equal (+ (S (S (S (S (fibs (S (S (S (S 0))))))))) (fibs (S 0))) (S (S (S (S (S (S (S (S 0)))))))))
46.     (equal (+ (S (S (S (S (fibs (S (S (S (S 0))))))))) (S 0)) (S (S (S (S (S (S (S (S 0)))))))))
47.     (equal (+ (S (S (S (S (S (fibs (S (S (S (S 0)))))))))) 0) (S (S (S (S (S (S (S (S 0)))))))))
48.     (equal (S (S (S (S (S (fibs (S (S (S (S 0)))))))))) (S (S (S (S (S (S (S (S 0)))))))))
49.     (equal (S (S (S (S (fibs (S (S (S (S 0))))))))) (S (S (S (S (S (S (S 0))))))))
50.     (equal (S (S (S (fibs (S (S (S (S 0)))))))) (S (S (S (S (S (S 0)))))))
51.     (equal (S (S (fibs (S (S (S (S 0))))))) (S (S (S (S (S 0))))))
52.     (equal (S (fibs (S (S (S (S 0)))))) (S (S (S (S 0)))))
53.     (equal (fibs (S (S (S (S 0))))) (S (S (S 0))))
54.     (equal (+ (fibs (S (S 0))) (fibs (S (S (S 0))))) (S (S (S 0))))
55.     (equal (+ (fibs (S (S 0))) (+ (fibs (S 0)) (fibs (S (S 0))))) (S (S (S 0))))
56.     (equal (+ (fibs (S (S 0))) (+ (fibs (S 0)) (+ (fibs 0) (fibs (S 0))))) (S (S (S 0))))
57.     (equal (+ (fibs (S (S 0))) (+ (fibs (S 0)) (+ (fibs 0) (S 0)))) (S (S (S 0))))
58.     (equal (+ (fibs (S (S 0))) (+ (fibs (S 0)) (+ (S (fibs 0)) 0))) (S (S (S 0))))
59.     (equal (+ (fibs (S (S 0))) (+ (fibs (S 0)) (S (fibs 0)))) (S (S (S 0))))
60.     (equal (+ (fibs (S (S 0))) (+ (S (fibs (S 0))) (fibs 0))) (S (S (S 0))))
61.     (equal (+ (fibs (S (S 0))) (+ (S (fibs (S 0))) 0)) (S (S (S 0))))
62.     (equal (+ (fibs (S (S 0))) (S (fibs (S 0)))) (S (S (S 0))))
63.     (equal (+ (S (fibs (S (S 0)))) (fibs (S 0))) (S (S (S 0))))
64.     (equal (+ (S (fibs (S (S 0)))) (S 0)) (S (S (S 0))))
65.     (equal (+ (S (S (fibs (S (S 0))))) 0) (S (S (S 0))))
66.     (equal (S (S (fibs (S (S 0))))) (S (S (S 0))))
67.     (equal (S (fibs (S (S 0)))) (S (S 0)))
68.     (equal (fibs (S (S 0))) (S 0))
69.     (equal (+ (fibs 0) (fibs (S 0))) (S 0))
70.     (equal (+ (fibs 0) (S 0)) (S 0))
71.     (equal (+ (S (fibs 0)) 0) (S 0))
72.     (equal (S (fibs 0)) (S 0))
73.     (equal (fibs 0) 0)
74.     (equal 0 0)
75.     true
test env::test::peano_fibonacci_six_is_eight ... ok
